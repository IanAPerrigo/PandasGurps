from uuid import UUID


class Observation:
    """
    Observations are generated by actions that observe different aspects of the game state.
    A few examples:
    - Perception check for vision
        Vision is granted based on Per vs stealth checks, or other such rolls. Reveals location/posture in the world.
    - Perception check for in depth view of a particular entity
        Yields information on the model information of the target of the observation.

    """
    def __init__(self, subject_id: UUID, target_id: UUID):
        self.subject_id = subject_id
        self.target_id = target_id


class FuzzyObservation(Observation):
    def __init__(self, subject_id: UUID, target_id: UUID):
        super(FuzzyObservation, self).__init__(subject_id=subject_id, target_id=target_id)

        # The collapsed value is the value of the observation AFTER it was used to generate a subjective state.
        self.collapsed_value = None

    def collapse_observation(self):
        raise NotImplementedError()


class ObservationSet:
    def __init__(self):
        self._store = dict()

    def add(self, observation: Observation):
        key = observation.target_id
        if key not in self._store:
            self._store[key] = {}
        obs_type = type(observation)
        if obs_type not in self._store[key]:
            self._store[key][obs_type] = list()
        self._store[key][obs_type].append(observation)

    def keys(self):
        return self._store.keys()

    def get(self, target_id: UUID, observation_type: type) -> list:
        return self._store[target_id][observation_type]

    def remove(self, target_id: UUID, observation: Observation):
        self._store[target_id][type(observation)].remove(observation)

    def remove_all(self, target_id: UUID, observation_type: type):
        self._store[target_id][observation_type] = list()

    def clear(self, target_id: UUID):
        self._store[target_id] = {}
