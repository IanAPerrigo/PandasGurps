
9/7/2020
Watched a showcase of numba (used for optimizing python and numpy operations) might be useful for pathfinding, etc.


10/11/2020
### NEW FEATURE ###
Genetics idea:
Each primary and secondary stat will be crossover sites. Pick a combination of both parent, then use normal distribution
to introduce noise (rho being the mutation factor).

Advantages, disadvantages, and innate skills will be passed on by selection:
- one idea, generate a number [0, 1] for each category and that is the percentage one of the parents gives to the child.
The rest of the percentage is how much the other parent gives. (This will mean duplicates will be more likely to be selected)
Introduce a small configurable mutation rate for each adv/dis/innate that will cause a random adv/dis/innate to be selected instead.

Learned skills (languages, non-innate skills, etc) must be TAUGHT.
Teaching will be an action that can be done between two actors with the same language (penalty otherwise).
Teaching is described in the gurps handbook (time to learn will need to be modified)

In order to allow children to learn easier, an innate language between parent and child will give bonuses to teaching.



10/19/2020
### BACKLOG IDEA ###
Visualization of un-executed moves and failed moves (like an obstacle is in the way)

##Needs to be completed##
Recovery from unconsciousness and retain consciousness

### NEW FEATURE ###
Add skills to combat:

- Make combat depend on skills (innate attacks only to begin).

Dependencies:
- Requires skills to be done.

### NEW FEATURE ###
Add weapons to combat:

- Make combat depend on skills and weapons

Dependencies:
- Requires skills to be done.
- Requires inventory and weapons to be done.


### NEW FEATURE ###
Add stances and their bonuses (status effects) to combat:

- Allow maneuvers to modify the posture of the actor (crouching, laying down)
- Allow actors to take defensive maneuvers (all out)

### NEW FEATURE ###
Inventory and equipped items:

- Have items storable in wearable containers on the actor (in the inventory tree).
- Have natural storage locations for anything (hands)
- Have natural storage locations for wearable equipment (body parts)

Dependencies:
- Should require the hit locations structures to be at least added by name (non-functional is okay)


### NEW FEATURE ###

# DONE # - Next modify the "fed" and 'quenched' status to be applied on character creation (both at level 0)
    Data associated with each status should be:
        Period begin tick (so day intervals can be calculated to apply the starvation and dehydration updates)


- After all status updates have been completed, update the triggered status effects.
    ### TO FIX ### - Currently starvation and dehydration increase in level on the tick update.
    This is wrong, they should update after a trigger (once every status is updated) to determine if the actor is
    starving or dehydrated. However, the tick update could be used to apply periodic penalties, such as dehydration's
    -1 FP per 8 hours.

        - e.g When an entity is created, the EnergyHandler will be called register events for watching food and water
        consumption at certain periods (for starvation and dehydration). The status_effect_manager will emit events for
        every trigger seen. For instance, Starvation and hydration trigger at the same tick, so after calling their
        update_tick, an attribute on the status is read 'triggered' that gives a list of all the times it triggered.
        The manager will then emit events for each tick the trigger occurred "dehydration_trigger", "starvation_trigger", etc.
        The id of the entity will be passed along, and the trigger can be processed.

- Adding a way to differentiate status types so that every status doesnt have to be enumerated.
    IDEA: the status_set object is a type keyed dictionary, and the is_afflicted_by() queries to see if the key is present.
    To support differentiation based on status core type, add and remove can determine if each status added inherits from
    one of the core types of interest.

    e.g.
    add(status_type: type) or remove
        # Care about
        # TriggeredStatus: Are triggered after a tick_update (and should emit an event)
        # PeriodicStatus: Are updated with tick_update on the next relevant tick
        # AperiodicStatus: Are not updated ever with tick_update.
        if issubclass(status_type, TriggeredStatus):
            # Add to dictionary under TriggeredStatus


- Adding and managing the modifiers

### FEATURE IDEA ###
Due to balancing concerns, the time frames between micro-gurps and macro-gurps could create a nightmare for simulation.
Add an option to compress or expand time:

Reasoning:
Having every second being simulated when macro-gurps deals with hours and days could be excruciating to test out features.
Time dilation controls could scale time to divide based on the day, e.g. instead of 86,400 iterations per day, a factor
of 10x could make only 8640 turns per day (easier to simulate longer term behaviors).

Other things might need to be done to ease computation, such as if an entity is not in the observation area of any other
entity and the entity is resting / sleeping, dont consider it an actor.


### IDEA ###
Combat states (for determining if an actor is 'in combat')
Required to determine if an actor can rest.

Any combat action between two entities will cause combat to start.
Combat is exited after a fixed time (10 seconds?)

### IDEA ###
Metrics idea for the energy system.
Track the number of FP points gained/spent by each entity (to see utilization of energy)
Track the number of meals and drinks consumed.


### FEATURE ###
For display purposes, have a map for every HumanView that assigns easier names for each entity / being
(instead of the UUID used in the engine). The mapping will transform the easier labels to UUIDs when they are used in
the engine.

- Ability to change the labels of particular entities (for marking interesting behavior perhaps)

### FEATURE ###
a system to not to create and load every component for the world on the screen.
Requires navigation arrows to move around, signaling the new components to render (and old ones to cull).
further optimizations required to lower the memory footprint of the grid system
    Areas of interest, areas around actors should be properly cached in memory.
    Areas outside a certain radius should be unloaded and saved to disk (sqlite?)
    Attempting to access a certain area outside of loaded cache bounds would cause a miss, and result in a chunk load into memory.


# DONE #
Better grid management.

Goals:
- Scalability:
    Support very large grids by using a chunking system. Chunks will be stored on disk (maybe sqlite) and loaded only
    when needed. This will remove the memory footprint for large worlds.

    Very large grids are sparse. Create a system for representing only areas that have data to save space.

- Performance:
    Current grid system is copied every turn for the subjective state, which is wildly inefficient.
    A different feature with observations will describe this solution, but it may depend on the new grid chunk system.

### NEW FEATURE ###
Observation System

Represent subjective states as a collection of different observations given to an actor for different observation actions.

# DONE #-LocationObservation:
    An object that describes the position of a particular entity.
    The location can be fuzzy, depending on the degree of success the actor has on a perception roll (and the distance from the actor).

    Granted from two different types of observation action:
    # DONE # - Passive perception: "plain sight" perception that is rolled every turn. Can only return a fuzzy location, unless
        the action critically succeeds.
    - Direct perception: can only be attempted when an existing LocationObservation is present. It improves the accuracy of
        the passive perception if successful, nothing if failed, or worsens if critical fail.

-VisualObservation:
    An object that describes the information known about a particular entity.
    Can represent a multitude of different attributes, but mainly everything related to the entities model.

    Granted from two different types of observation action:
    - Passive perception: "plain sight" perception that is rolled every turn. Can only provide plain sight or easily
        inferred attributes. Examples of plain sight attributes:
            - Active weapon
            - Worn armor (non concealed)
            - Roll results (success or fail) and stats involved (maybe not skills?) of actors in sight. (this will allow the AI to extrapolate the
            relative value of stats without giving it as explicit information.

    - Direct perception: provides information about advantages, disadvantages, HP and FP (since its easy to see
    damage / exhaustion). Adv/dis will have a observation difficulty to make certain ones harder / impossible to observe.

Storing observations:
- Each being will have an entry in a manager that contains all the current observations made.
- An ObservationSet will contain all the information an entity has on each other entity it can see.
    - The set can be queried by target_id, or the subject of the observation.
    - Each target will have a type-set of observations (key is the type of the observation type)

Managing observations:
- All observations will be granted by the ObserveAction.
    - Passive observations will not specify a target while direct will.
    - A passive observe action will be injected into the action-set of every actor that can currently perceive.
    These observations generated will be used to craft the subjective state of the actor.
    - Adding an observe action will require state to potentially be generated every action resolution.


### NEW FEATURE ###
Environments:

- Add the ability to spawn entities related to an environment, possibly in a procedural form.
- Walls that obstruct vision and movement
- different ground types that effect movement, or provide resources.
    - Since terrain will cover everything, a smart way to store it will be required so that
    too much space isnt taken up storing it, but still allows for extensibility.
- Add location objects, and have each location have different lists of attributes
    - entities, as they are now
    - terrain
    - triggers? for later

- Rendering locations easily done and extended by reading the location information.



### Complete ###
Vision and detection:

- Vision is primarily determined by distance, over a certain distance (based on perception) entities
are automatically determined as unobserved (to save computation power)

- If an entity is within range, there is no guarantee that the terrain allows for direct sight.
Raycast and tracing will determine if the entity is visible.

Tracing:
    - use the raycast path to iterate over and calculate whether each location obstructs vision.



### COMPLETE IMPROVEMENT ###
Make a more efficient system for representing game state.
Previous implementations copied each location object, which was wasteful and inefficient.

Important criteria to capture:
    - Some subjective fields (allowing for false observations) such as the locations of entities.
    - Static fields, that are provided always (if the location is visible)
        - Terrain features
    - A way to hide locations that aren't determined to be 'in range'
        - Use the 'Spiral' generator.
            Pros:
                - configurable distance as a radius
            Cons:
                - Wouldn't want to regenerate every observation.
                    - Mitigated by generating once, and if the location is attempted an access, offset the coordinates
                    from the spiral to see if its in bounds (of the center) pushing the computation time to access,
                    rather than on observation.
                        - Potential caveat is when an AI parses the whole FOV, meaning the calculation will be done
                        anyway, but potentially all at once, and inefficiently.
    - Reuse of the existing objects where possible
        - Create a read only view of the world, that allows the state to be read for a particular location
        but still reference the objects as they are in the real state, to reduce the overhead of generating a new state.


### FEATURE ###

Game State API optimized for AI consumption


Providing state deltas:
    - Subjective game state provided to the act function.
        - State object should support incremental reads (maybe another wrapper object that acts like a sequence)
            - DeltaObject, supports all() which grabs all deltas that exist that haven't been processed yet.
            - Incremental reads will allow for partial updates of the AI's game state 'image', reducing the workload
            required at any step.
            - DeltaObject will be inherited from to provide the tracking functionality of tracking changes in the state.
                - Writes that add changes to the object will be intercepted by the delta class and track accordingly.